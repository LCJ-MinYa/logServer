{
    "version": 3,
    "sources": [
        "../../../src/controller/life/rest.js"
    ],
    "names": [
        "module",
        "exports",
        "think",
        "Controller",
        "_REST",
        "constructor",
        "ctx",
        "resource",
        "getResource",
        "id",
        "getId",
        "modelInstance",
        "mongo",
        "__before",
        "param",
        "isGet",
        "get",
        "post",
        "accessToken",
        "sha1",
        "uid",
        "timestamp",
        "substring",
        "fail",
        "isPost",
        "controller",
        "isString",
        "isNumber",
        "last",
        "path",
        "split",
        "slice",
        "getAction",
        "data",
        "pk",
        "where",
        "find",
        "success",
        "select",
        "postAction",
        "isEmpty",
        "insertId",
        "add",
        "deleteAction",
        "rows",
        "delete",
        "affectedRows",
        "putAction",
        "update",
        "__call"
    ],
    "mappings": "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",
    "file": "../../../src/controller/life/rest.js",
    "sourcesContent": [
        "import encryp from '../../utils/sha1'\n\nmodule.exports = class extends think.Controller {\n    static get _REST() {\n        return true;\n    }\n\n    constructor(ctx) {\n        super(ctx);\n        this.resource = this.getResource();\n        this.id = this.getId();\n        this.modelInstance = this.mongo(this.resource);\n    }\n    __before() {\n        const param = this.isGet ? this.get() : this.post();\n        if (param.accessToken) {\n            // if (param.timestamp) {\n            //     let newTimestamp = new Date().getTime();\n            //     let oldTimestamp;\n            //     console.log('这里需要判断请求的时间是否在一分钟之内，防止过期请求,同时过滤来自api.ziyiu.com允许测试api过期请求');\n            // }\n            if (param.accessToken !== encryp.sha1(param.uid + param.timestamp).substring(3, 10)) {\n                this.fail(401, '瞎请求干啥，心疼我的服务器!');\n                return false;\n            }\n        } else {\n            this.fail(401, '瞎请求干啥，心疼我的服务器!');\n            return false;\n        }\n\n        if (this.isGet) {\n            this.fail(403, '请求不支持GET方法！');\n        }\n        if (this.isPost) {\n            this.fail(403, '请求不支持POST方法！');\n        }\n    }\n    /**\n     * get resource\n     * @return {String} [resource name]\n     */\n    getResource() {\n        return this.ctx.controller;\n    }\n    getId() {\n        const id = this.get('id');\n        if (id && (think.isString(id) || think.isNumber(id))) {\n            return id;\n        }\n        const last = this.ctx.path.split('/').slice(-1)[0];\n        if (last !== this.resource) {\n            return last;\n        }\n        return '';\n    }\n    async getAction() {\n        let data;\n        if (this.id) {\n            const pk = this.modelInstance.pk;\n            data = await this.modelInstance.where({\n                [pk]: this.id\n            }).find();\n            return this.success(data);\n        }\n        data = await this.modelInstance.select();\n        return this.success(data);\n    }\n    /**\n     * put resource\n     * @return {Promise} []\n     */\n    async postAction() {\n        const pk = this.modelInstance.pk;\n        const data = this.post();\n        delete data[pk];\n        if (think.isEmpty(data)) {\n            return this.fail('data is empty');\n        }\n        const insertId = await this.modelInstance.add(data);\n        return this.success({\n            id: insertId\n        });\n    }\n    /**\n     * delete resource\n     * @return {Promise} []\n     */\n    async deleteAction() {\n        if (!this.id) {\n            return this.fail('params error');\n        }\n        const pk = this.modelInstance.pk;\n        const rows = await this.modelInstance.where({\n            [pk]: this.id\n        }).delete();\n        return this.success({\n            affectedRows: rows\n        });\n    }\n    /**\n     * update resource\n     * @return {Promise} []\n     */\n    async putAction() {\n        if (!this.id) {\n            return this.fail('params error');\n        }\n        const pk = this.modelInstance.pk;\n        const data = this.post();\n        delete data[pk];\n        if (think.isEmpty(data)) {\n            return this.fail('data is empty');\n        }\n        const rows = await this.modelInstance.where({\n            [pk]: this.id\n        }).update(data);\n        return this.success({\n            affectedRows: rows\n        });\n    }\n    __call() {}\n};"
    ]
}