{
    "version": 3,
    "sources": [
        "../../../../src/controller/life/password/creatPassword.js"
    ],
    "names": [
        "BaseRest",
        "require",
        "CreatPassword",
        "indexAction",
        "PasswordList",
        "think",
        "mongo",
        "param",
        "post",
        "accessToken",
        "result",
        "where",
        "uid",
        "title",
        "url",
        "userName",
        "password",
        "thenAdd",
        "console",
        "log",
        "type",
        "success",
        "_id",
        "fail"
    ],
    "mappings": ";;;;AAAA,MAAMA,WAAWC,QAAQ,YAAR,CAAjB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6Ce,MAAMC,aAAN,SAA4BF,QAA5B,CAAqC;AAC7CG,aAAN,GAAoB;AAAA;;AAAA;AACnB;;;;;;;;;;;AAWA,YAAMC,eAAeC,MAAMC,KAAN,CAAY,cAAZ,EAA4B,eAA5B,CAArB;AACA,UAAIC,QAAQ,MAAKC,IAAL,EAAZ;AACA,aAAOD,MAAME,WAAb;AACA,UAAIC,SAAS,MAAMN,aAAaO,KAAb,CAAmB;AACrCC,aAAKL,MAAMK,GAD0B;AAErCC,eAAON,MAAMM,KAFwB;AAGrCC,aAAKP,MAAMO,GAH0B;AAIrCC,kBAAUR,MAAMQ,QAJqB;AAKrCC,kBAAUT,MAAMS;AALqB,OAAnB,EAMhBC,OANgB,CAMRV,KANQ,CAAnB;AAOAW,cAAQC,GAAR,CAAYT,MAAZ;AACA,UAAIA,OAAOU,IAAP,IAAe,KAAnB,EAA0B;AACzB,cAAKC,OAAL,CAAa;AACZC,eAAKZ,OAAOY;AADA,SAAb,EAEG,YAFH;AAGA,eAAO,KAAP;AACA,OALD,MAKO;AACN,cAAKC,IAAL,CAAU,GAAV,EAAe,aAAf;AACA,eAAO,KAAP;AACA;AA/BkB;AAgCnB;AAjCkD;kBAA/BrB,a",
    "file": "../../../../src/controller/life/password/creatPassword.js",
    "sourcesContent": [
        "const BaseRest = require('../rest.js');\n\n/**\n * @api {post} /life/password/creatPassword 创建密码\n * @apiDescription 根据密码信息创建密码\n * @apiGroup passwordGroup\n * @apiVersion 1.0.0\n *\n * @apiParam {String} type 密码类型\n * @apiParam {String} title 标题\n * @apiParam {String} url 密码所属网站\n * @apiParam {String} userName 用户名\n * @apiParam {String} password 密码\n * @apiParam {String} importance 重要性\n * @apiParam {String} notes 备注\n * @apiUse baseHasLoginParams\n *\n * @apiParamExample {string} 请求参数格式:\n *\t{\n *\t    \"type\": \"social\",\n *\t    \"title\": \"title\",\n *\t    \"url\": \"url\",\n *\t    \"userName\": \"userName\",\n *\t    \"password\": \"password\",\n *\t    \"importance\": \"importance\",\n *\t    \"notes\": \"notes\",\n *\t    \"timestamp\": 1543578242441,\n *\t    \"accessToken\": 'e2b06cd',\n *\t    \"uid\": 'user-uid'\n *\t}\n *\n * @apiUse baseSuccessParams\n * @apiSuccess {String} data._id 密码存储id\n *\n * @apiSuccessExample {json} 正确返回值:\n *\t{\n *\t    \"data\": [{\n *\t        \"_id\": \"_id\"\n *\t    }],\n *\t    \"errno\": 0,\n *\t    \"errmsg\": \"创建密码列表成功\"\n *\t}\n *  @apiUse CODE_UID_203\n *  @apiUse CODE_REFUSE_401\n *  @apiUse CODE_METHOD_GET_403\n *  @apiUse CODE_METHOD_POST_403\n */\nexport default class CreatPassword extends BaseRest {\n\tasync indexAction() {\n\t\t/* 连接多个数据库写法mongoPassword对应adapter.js中第二个object\n\t\t==>\tmongoPassword: {\n        \t\thost: host,\n        \t\tport: port,\n        \t\tuser: user,\n        \t\tpassword: password,\n        \t\tdatabase: database,\n        \t\tprefix: '',\n\t\t\t}\n\t\t\tmongoPassword的名称对应think.mongo的第二个参数（这个名称为自己命名的数据库配置名称）\n\t\t*/\n\t\tconst PasswordList = think.mongo('PasswordList', 'mongoPassword');\n\t\tlet param = this.post();\n\t\tdelete param.accessToken;\n\t\tlet result = await PasswordList.where({\n\t\t\tuid: param.uid,\n\t\t\ttitle: param.title,\n\t\t\turl: param.url,\n\t\t\tuserName: param.userName,\n\t\t\tpassword: param.password,\n\t\t}).thenAdd(param);\n\t\tconsole.log(result);\n\t\tif (result.type == 'add') {\n\t\t\tthis.success({\n\t\t\t\t_id: result._id\n\t\t\t}, '新增密码数据信息成功');\n\t\t\treturn false;\n\t\t} else {\n\t\t\tthis.fail(401, '已存在相同密码数据信息');\n\t\t\treturn false;\n\t\t}\n\t}\n}"
    ]
}